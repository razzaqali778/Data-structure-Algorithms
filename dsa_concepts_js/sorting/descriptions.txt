Bubble Sort:

Bubble Sort is a simple comparison-based sorting algorithm.
It repeatedly compares adjacent elements and swaps them if they are in the wrong order.
The largest elements "bubble" to the end of the array in each iteration.
Time Complexity: O(n^2) in the worst and average case, and O(n) in the best case (when the array is already sorted).
Space Complexity: O(1) (in-place sorting).



Selection Sort:

Selection Sort is an in-place comparison-based sorting algorithm.
It divides the input array into a sorted and an unsorted region.
In each iteration, it finds the minimum element from the unsorted region and swaps it with the first element of the unsorted region.
Time Complexity: O(n^2) in all cases (worst, average, and best).
Space Complexity: O(1) (in-place sorting).




Insertion Sort:

Insertion Sort is a simple comparison-based sorting algorithm.
It builds the final sorted array one element at a time by inserting each element into its correct position in the already sorted part of the array.
Time Complexity: O(n^2) in the worst and average case, and O(n) in the best case (when the array is already sorted).
Space Complexity: O(1) (in-place sorting).




Merge Sort:

Merge Sort is a divide-and-conquer sorting algorithm.
It divides the input array into two halves, recursively sorts each half, and then merges the sorted halves.
It uses a helper function (merge) to merge the two sorted halves into a single sorted array.
Time Complexity: O(n log n) in all cases (worst, average, and best).
Space Complexity: O(n) (requires additional space for merging).



Quick Sort:

Quick Sort is a divide-and-conquer sorting algorithm.
It selects a pivot element and partitions the array into two sub-arrays, one with elements less than the pivot and the other with elements greater than the pivot.
It recursively sorts the sub-arrays and combines them to obtain the final sorted array.
Time Complexity: O(n log n) in the average and best case, and O(n^2) in the worst case (when the pivot selection is poor).
Space Complexity: O(log n) on average (in-place sorting), but O(n) in the worst case (when the recursion depth is the same as the input size).



Heap Sort:

Heap Sort is a comparison-based sorting algorithm that uses a binary heap data structure.
It builds a max-heap (or min-heap) from the input array and repeatedly extracts the maximum (or minimum) element from the heap and places it at the end of the array.
Time Complexity: O(n log n) in all cases (worst, average, and best).
Space Complexity: O(1) (in-place sorting).



Radix Sort:

Radix Sort is a non-comparison-based sorting algorithm that sorts integers by processing digits.
It performs counting sort for each digit, starting from the least significant digit to the most significant digit.
Time Complexity: O(k * n), where k is the number of digits in the maximum element and n is the number of elements.
Space Complexity: O(n + k) (requires additional space for counting and output arrays)
